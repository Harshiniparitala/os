#include <stdio.h>
#include <stdlib.h>

// Function to perform Worst Fit memory allocation
void worstFit(int blockSizes[], int m, int processSizes[], int n) {
    // Array to store the allocation of processes
    int allocation[n];
    
    // Initially, all processes are not allocated
    for (int i = 0; i < n; i++) {
        allocation[i] = -1;
    }
    
    // One by one allocate memory to each process
    for (int i = 0; i < n; i++) {
        int maxIndex = -1; // Index of the largest block
        for (int j = 0; j < m; j++) {
            // Find the block with the largest size that can accommodate the process
            if (blockSizes[j] >= processSizes[i]) {
                if (maxIndex == -1 || blockSizes[j] > blockSizes[maxIndex]) {
                    maxIndex = j;
                }
            }
        }

        // If we found a block for the process
        if (maxIndex != -1) {
            // Allocate the block to the process
            allocation[i] = maxIndex;
            
            // Reduce the size of the block by the size of the allocated process
            blockSizes[maxIndex] -= processSizes[i];
        }
    }
    
    // Print the result of the allocation
    printf("\nProcess No.\tProcess Size\tBlock No.\tBlock Size\n");
    for (int i = 0; i < n; i++) {
        if (allocation[i] != -1) {
            printf("%d\t\t%d\t\t%d\t\t%d\n", i+1, processSizes[i], allocation[i]+1, blockSizes[allocation[i]]);
        } else {
            printf("%d\t\t%d\t\tNot Allocated\t-\n", i+1, processSizes[i]);
        }
    }
}

int main() {
    int blockSizes[] = {100, 500, 200, 300, 600};  // Memory blocks available
    int processSizes[] = {212, 417, 112, 426};    // Process size requests
    
    int m = sizeof(blockSizes) / sizeof(blockSizes[0]);  // Number of memory blocks
    int n = sizeof(processSizes) / sizeof(processSizes[0]);  // Number of processes
    
    // Call the worstFit function to allocate memory
    worstFit(blockSizes, m, processSizes, n);
    
    return 0;
}
