#include <stdio.h>
#include <stdlib.h>

#define MAX_FRAMES 10

// Function to simulate Optimal Page Replacement
void optimalPageReplacement(int pages[], int n, int frames) {
    int memory[frames];   // Array to hold pages in memory
    int pageFaults = 0;   // Counter for page faults
    int i, j, replaceIndex, farthest, futureUse[frames];

    // Initialize memory with -1 (no pages in memory initially)
    for (i = 0; i < frames; i++) {
        memory[i] = -1;
    }

    printf("Page\tMemory State\n");

    // Loop through each page in the reference string
    for (i = 0; i < n; i++) {
        int found = 0;
        
        // Check if the page is already in memory (no page fault)
        for (j = 0; j < frames; j++) {
            if (memory[j] == pages[i]) {
                found = 1;
                break;
            }
        }

        // If page is not found in memory (page fault)
        if (!found) {
            // Find the page that will not be used for the longest time in the future
            // Initialize futureUse[] array
            for (j = 0; j < frames; j++) {
                futureUse[j] = -1;  // Default: -1 indicates the page will not be used again
            }

            for (j = 0; j < frames; j++) {
                // Find when each page in memory will be used again
                for (int k = i + 1; k < n; k++) {
                    if (pages[k] == memory[j]) {
                        futureUse[j] = k;
                        break;
                    }
                }
            }

            // Find the page that will be used farthest in the future or never used again
            farthest = -1;
            for (j = 0; j < frames; j++) {
                if (futureUse[j] == -1) {
                    replaceIndex = j;
                    break;
                } else if (futureUse[j] > farthest) {
                    farthest = futureUse[j];
                    replaceIndex = j;
                }
            }

            // Replace the page
            memory[replaceIndex] = pages[i];
            pageFaults++;
        }

        // Print the current memory state after each page access
        printf("%d\t", pages[i]);
        for (j = 0; j < frames; j++) {
            if (memory[j] != -1)
                printf("%d ", memory[j]);
            else
                printf("- ");
        }
        printf("\n");
    }

    printf("\nTotal Page Faults: %d\n", pageFaults);
}

int main() {
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 4};  // Example reference string
    int n = sizeof(pages) / sizeof(pages[0]);
    int frames;

    // Ask the user for the number of frames
    printf("Enter the number of frames: ");
    scanf("%d", &frames);

    if (frames > MAX_FRAMES || frames <= 0) {
        printf("Invalid number of frames. Max allowed frames are %d.\n", MAX_FRAMES);
        return -1;
    }

    // Simulate Optimal Page Replacement
    optimalPageReplacement(pages, n, frames);

    return 0;
}
